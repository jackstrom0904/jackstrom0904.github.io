<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jackstrom0904.github.io</id>
    <title>Error404</title>
    <updated>2020-01-27T08:45:22.436Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jackstrom0904.github.io"/>
    <link rel="self" href="https://jackstrom0904.github.io/atom.xml"/>
    <subtitle>总笑它人傻、到了最后才发现自己才是名副其实的傻子</subtitle>
    <logo>https://jackstrom0904.github.io/images/avatar.png</logo>
    <icon>https://jackstrom0904.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Error404</rights>
    <entry>
        <title type="html"><![CDATA[巡风内网应急系统]]></title>
        <id>https://jackstrom0904.github.io/r5qRundLE</id>
        <link href="https://jackstrom0904.github.io/r5qRundLE">
        </link>
        <updated>2020-01-27T05:27:20.000Z</updated>
        <content type="html"><![CDATA[<p>0x01 巡风介绍<br>
巡风是一款适用于企业内网的漏洞快速应急、巡航扫描系统，通过搜索功能可清晰的了解内部网络资产分布情况，并且可指定漏洞插件对搜索结果进行快速漏洞检测并输出结果报表<br>
0x02 巡风安装<br>
#修改时区<br>
root@bt:/opt# echo TZ='Asia/Shanghai'; export TZ &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile<br>
#操作系统依赖<br>
root@bt:/opt# apt-get update<br>
root@bt:/opt# apt-get install gcc libssl-dev libffi-dev python-dev libpcap-dev<br>
#python依赖库<br>
root@bt:/opt#wget https://sec.ly.com/mirror/get-pip.py --no-check-certificate<br>
root@bt:/opt#python get-pip.py<br>
#安装数据库<br>
导入包管理系统使用的公钥<br>
root@bt:/opt#wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -<br>
gnupg使用以下命令安装及其所需的库<br>
root@bt:/opt#sudo apt-get install gnupg<br>
安装完成后，重试导入密钥<br>
root@bt:/wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -<br>
Ubuntu 18.04（Bionic）创建列表文件<br>
root@bt:/echo &quot;deb [ arch=amd64 ] http://repo.mongodb.com/apt/ubuntu bionic/mongodb-enterprise/4.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-enterprise.list<br>
重新加载本地软件包数据库<br>
root@bt:/opt#apt-get update<br>
安装MongoDB<br>
root@bt:/opt#sudo apt-get install -y mongodb-enterprise<br>
启动数据库<br>
root@bt:/opt#service mongod start<br>
mongodb添加认证<br>
root@bt:/opt# mongo</p>
<blockquote>
<p>use xunfeng<br>
db.createUser({user:'scan',pwd:'123456',roles:[{role:'dbOwner',db:'xunfeng'}]})<br>
exit<br>
下载巡风<br>
root@bt:/opt# git clone https://github.com/ysrc/xunfeng.git<br>
root@bt:/opt/xunfeng/db# pwd #进入数据库文件夹<br>
/opt/xunfeng/db<br>
root@bt:/opt/xunfeng/db# mongorestore -h 127.0.0.1 --port 27017 -d xunfeng . #导入数据库<br>
root@bt:/opt/xunfeng# pwd # 安装python相关依赖<br>
/opt/xunfeng<br>
root@bt:/opt/xunfeng# pip install -r requirements.txt<br>
修改配置文件<br>
root@bt:/opt/xunfeng# vim Config.py<br>
class Config(object):<br>
ACCOUNT = 'admin'   #后台登录用户名<br>
PASSWORD = 'xunfeng321'#用户密码<br>
class ProductionConfig(Config):<br>
DB = '127.0.0.1'<br>
PORT = 65521<br>
DBUSERNAME = 'scan'<br>
DBPASSWORD = '123456'<br>
DBNAME = 'xunfeng'<br>
#启动巡风<br>
root@bt:/opt/xunfeng# chmod +x *<br>
root@bt:/opt/xunfeng# ./Run.sh<br>
程序部署完成<br>
<img src="https://jackstrom0904.github.io/post-images/1580114699144.png" alt="" loading="lazy"></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[渗透测试框架之TrackRay]]></title>
        <id>https://jackstrom0904.github.io/s4ReIUkoC</id>
        <link href="https://jackstrom0904.github.io/s4ReIUkoC">
        </link>
        <updated>2020-01-27T02:14:19.000Z</updated>
        <content type="html"><![CDATA[<p>0x01 TrackRay介绍<br>
溯光，英文名“TrackRay”，意为逆光而行，追溯光源。同时致敬安全圈前辈开发的“溯雪”，“流光<br>
溯光是一个开源的插件化渗透测试框架，框架自身实现了漏洞扫描功能，集成了知名安全工具：Metasploit、Nmap、Sqlmap、AWVS等。<br>
溯光使用 Java 编写，SpringBoot 作为基础框架，JPA + HSQLDB嵌入式数据库做持久化，Maven 管理依赖，Jython 实现 Python 插件调用，quartz 做任务调度，freemarker 做视图层，Websocket 实现命令行式插件交互。框架可扩展性高，支持 Java、Python、JSON 等方式编写插件，有“漏洞扫描插件”、“爬虫插件”、“独立应用插件”、“内部插件”、“无交互插件”和“可交互插件” 等插件类型。<br>
项目地址：https://github.com/iSafeBlue/TrackRay<br>
0x02 TrackRay依赖环境<br>
JDK 1.8<br>
Python 2.7<br>
Maven<br>
Git<br>
Metasploit<br>
Nmap(建议安装)<br>
SQLMAP(建议安装)<br>
AWVS<br>
说明：由于个人环境已部署了部分环境、故此无法记录所有的安装过程<br>
<strong>root@bt:/# java -version</strong> #已安装<br>
openjdk version &quot;1.8.0_232&quot;<br>
OpenJDK Runtime Environment (build 1.8.0_232-8u232-b09-0ubuntu1~18.04.1-b09)<br>
OpenJDK 64-Bit Server VM (build 25.232-b09, mixed mode)<br>
**root@bt:/# python2.7 **#已安装<br>
Python 2.7.17 (default, Nov  7 2019, 10:07:09)<br>
root@bt:/# git #已安装<br>
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]<br>
[--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]<br>
[-p | --paginate | --no-pager] [--no-replace-objects] [--bare]<br>
[--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]<br>
<command> [<args>]<br>
**root@bt:/# nmap **#已安装<br>
Nmap 7.60 ( https://nmap.org )<br>
Usage: nmap [Scan Type(s)] [Options] {target specification}<br>
TARGET SPECIFICATION:<br>
**root@bt:/# msfconsole ** #msf已安装<br>
[-] ***rting the Metasploit Framework console...<br>
[-] * WARNING: No database support: No database YAML file<br>
[-] ***<br>
####sqlmap安装####<br>
root@bt:/opt# git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev #安装sqlmap<br>
root@bt:/opt# cd sqlmap-dev/ #进入sql目录<br>
root@bt:/opt/sqlmap-dev# pwd #获取路径信息<br>
/opt/sqlmap-dev<br>
root@bt:/opt/sqlmap-dev# vim /etc/profile #将SQLMAP路径加入到环境变量<br>
export PATH=/opt/sqlmap-dev:$PATH<br>
root@bt:/opt/sqlmap-dev# python sqlmap.py  #部署完成<br>
sqlmap.py: error: missing a mandatory option (-d, -u, -l, -m, -r, -g, -c, --list-tampers, --wizard, --update, --purge or --dependencies). Use -h for basic and -hh for advanced help<br>
#####AWVS安装#####<br>
root@bt:/# apt-get install libxdamage1 libgtk-3-0 libasound2 libnss3 libxss1 libx11-xcb-dev -y #安装依赖<br>
root@bt:/opt/wvs# ./acunetix_trial.sh #安装官方程序 按照信息输入即可<br>
root@bt:/opt/wvs# cp patch_awvs /home/acunetix/.acunetix_trial/v_190927120/scanner/ #将破解补丁拷贝到安装目录</p>
<p>0x03<br>
0x04<br>
0x05</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[开源蜜罐之HFish部署]]></title>
        <id>https://jackstrom0904.github.io/5J3Cs3gZQ</id>
        <link href="https://jackstrom0904.github.io/5J3Cs3gZQ">
        </link>
        <updated>2020-01-27T01:37:32.000Z</updated>
        <content type="html"><![CDATA[<p>0x01 蜜罐介绍<br>
蜜罐技术本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。<br>
0x02 蜜罐部署<br>
安装过程<br>
https://github.com/hacklcx/HFish/releases #下载对应的安装包<br>
<img src="https://jackstrom0904.github.io/post-images/1580089301747.png" alt="" loading="lazy"><br>
上述图片作者基于各个版本封装的安装包<br>
root@bt:/# wget https://github.com/hacklcx/HFish/releases/download/0.5/HFish-0.5-linux-amd64.tar.gz #使用wget下载安装包<br>
<img src="https://jackstrom0904.github.io/post-images/1580089472470.png" alt="" loading="lazy"><br>
root@bt:/# tar zxvf HFish-0.5-linux-amd64.tar.gz #解压文件<br>
root@bt:/# cd HFish-0.5-linux-amd64 #进入目录<br>
root@bt:/HFish-0.5-linux-amd64# ls -l   # 目录说明<br>
总用量 18236<br>
drwxr-xr-x 2 root root     4096 12月  3 21:11 admin<br>
-rw-r--r-- 1 root root     5236 11月 28 21:35 config.ini #核心配置文件<br>
drwxr-xr-x 3 root root     4096 12月  3 21:11 db<br>
-rwxr-xr-x 1 root root 18590216 12月  3 20:32 HFish #启动文件<br>
drwxr-xr-x 2 root root     4096 12月  3 21:11 images<br>
drwxr-xr-x 4 root root     4096 12月  3 21:11 libs<br>
-rw-r--r-- 1 root root    35148 9月   8 23:43 LICENSE<br>
drwxr-xr-x 2 root root     4096 12月  2 17:22 logs<br>
-rw-r--r-- 1 root root     5812 12月  3 20:58 README.md<br>
drwxr-xr-x 8 root root     4096 12月  3 21:11 static<br>
drwxr-xr-x 4 root root     4096 8月  10 17:37 web<br>
root@bt:/HFish-0.5-linux-amd64# ./HFish #启动程序默认管理端口为9001<br>
<img src="https://jackstrom0904.github.io/post-images/1580089788509.png" alt="" loading="lazy"><br>
0x03 访问HFISH<br>
http://192.168.188.134:9001/login  #IP地址为安装机器的地址<br>
<img src="https://jackstrom0904.github.io/post-images/1580090009141.png" alt="" loading="lazy"><br>
默认登录用户名与密码为admin&amp;&amp;admin<br>
配置文件可进行修改<br>
<img src="https://jackstrom0904.github.io/post-images/1580090097723.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[渗透测试之Nmap]]></title>
        <id>https://jackstrom0904.github.io/Wm37OF_ZL</id>
        <link href="https://jackstrom0904.github.io/Wm37OF_ZL">
        </link>
        <updated>2020-01-25T09:03:45.000Z</updated>
        <content type="html"><![CDATA[<p>2</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[渗透测试之基础信息收集]]></title>
        <id>https://jackstrom0904.github.io/axcjIUufJ</id>
        <link href="https://jackstrom0904.github.io/axcjIUufJ">
        </link>
        <updated>2020-01-25T09:02:01.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[渗透测试工具之Sqlmap]]></title>
        <id>https://jackstrom0904.github.io/SNQOq63GI</id>
        <link href="https://jackstrom0904.github.io/SNQOq63GI">
        </link>
        <updated>2020-01-25T08:57:45.000Z</updated>
        <summary type="html"><![CDATA[<p>1.工具介绍</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.工具介绍</p>
<!-- more -->
<!-- more -->
<p>2.参数介绍</p>
<!-- more -->
<!-- more -->
<p>3.Access注入</p>
<!-- more -->
<!-- more -->
<p>4.Sqlserver注入</p>
<!-- more -->
<!-- more -->
<p>5.MySQL注入</p>
<!-- more -->
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020除夕夜随笔]]></title>
        <id>https://jackstrom0904.github.io/2020-chu-xi-ye-sui-bi</id>
        <link href="https://jackstrom0904.github.io/2020-chu-xi-ye-sui-bi">
        </link>
        <updated>2020-01-24T10:17:33.000Z</updated>
        <content type="html"><![CDATA[<pre><code>本来按照原计划除夕过后、来一场说走就走旅程、但是由于病毒的缘故、计划彻底泡汤。只能乖乖的呆在家里。
在即将逝去的除夕夜、2020相对而言对我来将更是一个挑战、这一年按照原计划中应该会有新的变动、希望在新的变动中能有些感情、可能是习惯了充满感情的环境。至少有一天离开之后、至少还不会彻底像断了线的风筝、最起码还能出来聊聊天、笑谈人生😁。
半年时间、一座新城、一切从零开始这应该是2019年终的总结。2020希望诸事顺利、不能在执迷不悟了。
WH事件逐渐让我明白、最喜欢的永远都是见一面、少一面。可惜..........
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://jackstrom0904.github.io/post-images/1579864401576.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu-Metasploit]]></title>
        <id>https://jackstrom0904.github.io/ubuntu-metasploit</id>
        <link href="https://jackstrom0904.github.io/ubuntu-metasploit">
        </link>
        <updated>2020-01-17T02:18:51.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1.Metasploit</strong><br>
root@bt:/opt# apt-get install curl -y #安装curl<br>
root@bt:/opt# curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \</p>
<blockquote>
<p>chmod 755 msfinstall &amp;&amp; <br>
./msfinstall<br>
<strong>2.nmap</strong><br>
root@bt:/opt# apt-get install -y nmap<br>
<strong>3.masscan</strong><br>
root@bt:/opt# apt-get install git -y #安装git<br>
root@bt:/opt#  git clone https://github.com/robertdavidgraham/masscan<br>
root@bt:/opt# cd masscan/<br>
root@bt:/opt# cd make<br>
root@bt:/opt/masscan# vim /etc/profile  添加到环境变量<br>
export PATH=/opt/masscan/bin:$PATH<br>
<strong>4.hydra</strong><br>
root@bt:# apt-get install hydra -y</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu18.04基本配置]]></title>
        <id>https://jackstrom0904.github.io/ubuntu1804-ji-ben-pei-zhi</id>
        <link href="https://jackstrom0904.github.io/ubuntu1804-ji-ben-pei-zhi">
        </link>
        <updated>2020-01-17T01:17:55.000Z</updated>
        <summary type="html"><![CDATA[<p>1.安装ssh</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.安装ssh</p>
<!-- more -->
<p>sudo apt-get update<br>
sudo apt-get install openssh-service<br>
sudo service ssh start</p>
 <!-- more -->
<p>2.root登录</p>
<!-- more -->
<p>root@bt:~# sudo passwd root #设置root密码<br>
root@bt:/opt#vim  /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf<br>
加入到文件末尾<br>
greeter-show-manual-login=true<br>
all-guest=false<br>
root@bt:/opt# vim /etc/pam.d/gdm-autologin<br>
#注释auth required pam_success_if.so user!=root quiet_success<br>
root@bt:/opt# vim /etc/pam.d/gdm-password<br>
#注释auth required pam_success_if.so user!=root quiet_success<br>
root@bt:/opt# vim /root/.profile<br>
将尾行修改成tty -s &amp;&amp; mesg n || true</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[甲方安全建设之路]]></title>
        <id>https://jackstrom0904.github.io/jia-fang-an-quan-jian-she-zhi-lu</id>
        <link href="https://jackstrom0904.github.io/jia-fang-an-quan-jian-she-zhi-lu">
        </link>
        <updated>2020-01-16T04:38:24.000Z</updated>
        <content type="html"><![CDATA[<p>此文源于前几天参加的某局的会议、一些心得及总结。<br>
1.安全不等于设备数量<br>
目前部分企业的安全建设之路，最喜欢的就是大量采购安全设备(FW，IDS、IPS、DDOS)。HW期间其实是最好的一个证明、安全不等于设备数量。本质上来说安全设备还是有存在的意义、但是为何HW期间<br>
叠加的安全设备、为何还能被突破。个人认为问题出现在以下几个点、安全策略梳理周期、补丁版本更新周期、设备是否专业人士维护。<br>
2.弱口令如何终结<br>
弱口令应该属于一个老生常谈的话题、但为何还会频繁发生。个人认为主要以下2个点：管理制度是否具备、技术上是否对弱口令进行把控。<br>
3.资产管理的重要性<br>
资产的重要性、应该在只有在国内近几年HW行动期间才会得重视、但是真正的HW阶段依旧会发现部分企业资产确实很乱，举个栗子：某子站已被拿下权限、蓝方会得花部分时间来查找对应的设备、但是从红蓝对抗的角度上来、部分企业的内网限制比较松散、一旦打点成功、这个时间足够横向突破内网。</p>
<pre><code>安全建设之路，确实需要很长的一段时间、安全的维度是业务安全稳定的运行。安全的维度不在是把设备作为主、更多的是根据自身的业务体系、完善各种管理机制、并且在企业中融入各类开源类安全产品进行二次开发完善。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[别了朋友、江湖再见]]></title>
        <id>https://jackstrom0904.github.io/bie-liao-peng-you-jiang-hu-zai-jian-0926</id>
        <link href="https://jackstrom0904.github.io/bie-liao-peng-you-jiang-hu-zai-jian-0926">
        </link>
        <updated>2020-01-14T02:58:34.000Z</updated>
        <content type="html"><![CDATA[<pre><code>    原以为对待朋友同事只要你用心的付出了、就能得到相等的对待、但是由于时间的摧残流逝、渐渐的明白了原来做人不可以在那么实在了。
    人在漫长的一生中、总会遇到很多的人、这些人曾被我们定义为同学、朋友、同事、爱人、家人、知心网友、擦肩而过的人。人的一生中也正是有这些人的出现与离开，才让我们在生活中尝尽了酸甜苦辣，悲欢离合。
    短暂的生命中我们应该去尝试感谢每一个出现的人、是这些人交会了我们如何成长、如何去爱、如何去恨。感谢那些曾经在我最落魄的时候给我建议的人、给我帮助的人、谢谢你们。
</code></pre>
]]></content>
    </entry>
</feed>